"use strict";Object.defineProperty(exports, "__esModule", { value: true });exports.install = install;const childProcess = require('child_process');
const childProcessOption = { cwd: __dirname, shell: true, stdio: [0, 1, 2] };







































function install({ shouldThrow = true } = {}) {
  try {
    let libgit2PackageVersion = `libgit2-27`;

    let packagesInstalled = childProcess.
    execSync(`list="$(dpkg -l)" && echo $list`, { cwd: __dirname, encoding: 'utf8' }).
    replace(/\n$/, '').
    trim();


    if (packagesInstalled.includes('libgit2')) console.log(`nodegit's dependency 'libgit2' is installed.`);else

    childProcess.execSync(
    [
    `echo 'Machine global peer dependency "nodegit" is required. Checking for libgit2...\n'`,

    `DEBIAN_FRONTEND=noninteractive sudo apt-get install -yqq ${libgit2PackageVersion} openssl`,
    `sudo yarn global add node-pre-gyp`].
    join(' && \\\n'),
    childProcessOption);

  } catch (error) {
    if (shouldThrow) throw error;else
    console.log(error);
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NvdXJjZS9wYWNrYWdlSW5zdGFsbGF0aW9uL3VuaXhQYWNrYWdlL25vZGVnaXQuanMiXSwibmFtZXMiOlsiY2hpbGRQcm9jZXNzIiwicmVxdWlyZSIsImNoaWxkUHJvY2Vzc09wdGlvbiIsImN3ZCIsIl9fZGlybmFtZSIsInNoZWxsIiwic3RkaW8iLCJpbnN0YWxsIiwic2hvdWxkVGhyb3ciLCJsaWJnaXQyUGFja2FnZVZlcnNpb24iLCJwYWNrYWdlc0luc3RhbGxlZCIsImV4ZWNTeW5jIiwiZW5jb2RpbmciLCJyZXBsYWNlIiwidHJpbSIsImluY2x1ZGVzIiwiY29uc29sZSIsImxvZyIsImpvaW4iLCJlcnJvciJdLCJtYXBwaW5ncyI6InFHQUFBLE1BQU1BLFlBQVksR0FBR0MsT0FBTyxDQUFDLGVBQUQsQ0FBNUI7QUFDQSxNQUFNQyxrQkFBa0IsR0FBRyxFQUFFQyxHQUFHLEVBQUVDLFNBQVAsRUFBa0JDLEtBQUssRUFBRSxJQUF6QixFQUErQkMsS0FBSyxFQUFFLENBQUMsQ0FBRCxFQUFJLENBQUosRUFBTyxDQUFQLENBQXRDLEVBQTNCOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBd0NPLFNBQVNDLE9BQVQsQ0FBaUIsRUFBRUMsV0FBVyxHQUFHLElBQWhCLEtBQXlCLEVBQTFDLEVBQThDO0FBQ25ELE1BQUk7QUFDRixRQUFJQyxxQkFBcUIsR0FBSSxZQUE3Qjs7QUFFQSxRQUFJQyxpQkFBaUIsR0FBR1YsWUFBWTtBQUNqQ1csSUFBQUEsUUFEcUIsQ0FDWCxpQ0FEVyxFQUN1QixFQUFFUixHQUFHLEVBQUVDLFNBQVAsRUFBa0JRLFFBQVEsRUFBRSxNQUE1QixFQUR2QjtBQUVyQkMsSUFBQUEsT0FGcUIsQ0FFYixLQUZhLEVBRU4sRUFGTTtBQUdyQkMsSUFBQUEsSUFIcUIsRUFBeEI7OztBQU1BLFFBQUlKLGlCQUFpQixDQUFDSyxRQUFsQixDQUEyQixTQUEzQixDQUFKLEVBQTJDQyxPQUFPLENBQUNDLEdBQVIsQ0FBYSw4Q0FBYixFQUEzQzs7QUFFRWpCLElBQUFBLFlBQVksQ0FBQ1csUUFBYjtBQUNFO0FBQ0csNEZBREg7O0FBR0csZ0VBQTJERixxQkFBc0IsVUFIcEY7QUFJRyx1Q0FKSDtBQUtFUyxJQUFBQSxJQUxGLENBS08sVUFMUCxDQURGO0FBT0VoQixJQUFBQSxrQkFQRjs7QUFTSCxHQXBCRCxDQW9CRSxPQUFPaUIsS0FBUCxFQUFjO0FBQ2QsUUFBSVgsV0FBSixFQUFpQixNQUFNVyxLQUFOLENBQWpCO0FBQ0tILElBQUFBLE9BQU8sQ0FBQ0MsR0FBUixDQUFZRSxLQUFaO0FBQ047QUFDRiIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IGNoaWxkUHJvY2VzcyA9IHJlcXVpcmUoJ2NoaWxkX3Byb2Nlc3MnKVxuY29uc3QgY2hpbGRQcm9jZXNzT3B0aW9uID0geyBjd2Q6IF9fZGlybmFtZSwgc2hlbGw6IHRydWUsIHN0ZGlvOiBbMCwgMSwgMl0gfVxuXG4vKiBcbk5vZGVHaXQgbnBtIHBhY2tnZSAtIFJlcXVpcmVkIHByZWluc3RhbGwgcGFja2FnZXM6IFxuICAgIC0gaHR0cHM6Ly9wYWNrYWdlcy5kZWJpYW4ub3JnL3NvdXJjZS9zaWQvbGliZ2l0MiBodHRwczovL2dpdGh1Yi5jb20vbGliZ2l0Mi9saWJnaXQyXG4gICAgbGliZ2l0MiB1bml4IHBhY2thZ2UgaXMgYSBkZXBlbmRlbmN5IGZvciBub2RlZ2l0IG5wbSBwYWNrYWdlLlxuICAgIChkbyBub3QgdXNlIGRldmVsb3BtZW50IHZlcnNpb24gYGxpYmdpdDItZGV2YCwgdXNlIHRoZSBzdGFibGUgb25lIGluc3RlYWQuKVxuICAgIC0gT3B0aW9uYWwgZGVwZW5kZW5jaWVzOiBodHRwczovL3NhbHNhLmRlYmlhbi5vcmcvZGViaWFuL2xpYmdpdDIjb3B0aW9uYWwtZGVwZW5kZW5jaWVzXG4gICAgICAgIC0gaHR0cHM6Ly9wYWNrYWdlcy5kZWJpYW4ub3JnL3NvdXJjZS9qZXNzaWUvb3BlbnNzbFxuTm90ZTogdGhhdCB0aGUgcGFja2FnZSB2ZXJzaW4gbWF5IG5vdCBzdXBwb3J0IHRoZSBsYXRlc3Qgbm9kZWpzIHZlcnNpb24sIGUuZy4gbm9kZWdpdEBuZXh0IHN1cHBvcnRzIE5vZGVqcyAxMiB3aGlsZSB0aGUgZm9ybWVyIHZlcnNpb25zIHRocm93IGVycm9ycyBkdXJpbmcgaW5zdGFsbGF0aW9uLlxuTm90ZTogdGhlIHBhY2thZ2UgZXhpc3RzIGZvciBsYXRlc3QgZGViaWFuL3VidW50dSByZWxlYXNlcy4gU29tZSByZWxlYXNlcyBzdXBwb3J0IG9ubHkgb2xkZXIgdmVyc2lvbnMuXG5cbiMgSWYgZXJyb3JzIG9jY3VyIHRyeSBpbnN0YWxsaW5nIHRoZSBmb2xsb3dpbmcgcGFja2FnZXM6XG5odHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy8zNzYzNDg4My9pbnN0YWxsaW5nLWxpYmdpdDItYW5kLXB5Z2l0Mi1vbi1kZWJpYW4tZG9ja2VyXG5gYGBcbiAgICBERUJJQU5fRlJPTlRFTkQ9bm9uaW50ZXJhY3RpdmUgc3VkbyBhcHQtZ2V0IHVwZGF0ZSAtcXEgJiYgREVCSUFOX0ZST05URU5EPW5vbmludGVyYWN0aXZlIHN1ZG8gYXB0LWdldCBpbnN0YWxsIC15cXEgb3BlbnNzbCBsaWJzc2wtZGV2IGxpYmdpdDItMjcgbGlic3NoMi0xLWRldiAgbGliZmZpLWRldiAgemxpYjFnLWRldiBweXRob24tY2ZmaSBweXRob24tZGV2ICBweXRob24tcGlwIGJ1aWxkLWVzc2VudGlhbCBjbWFrZSAgZ2NjICBwa2ctY29uZmlnICBnaXQgbGliaHR0cC1wYXJzZXItZGV2IHB5dGhvbi1zZXR1cHRvb2xzIHdnZXRcbmBgYFxuKi9cblxuLypcblRvIHR1cm4gb24gZXhwZXJpbWVudGFsIHBhY2thZ2VzIGFuZCB1c2UgdGhlIGV4cGVyaW1lbnRhbCBsaWJnaXQyIGxhdGVzdCB2ZXJzaW9uOiBcbmNoZWNrIGxpbnV4IHZlcnNpb24gdGhlbiB2ZXJpZnkgdGhlIGV4aXN0ZW5jZSBvZiB0aGUgcGFja2dlIGluIHRoZSBkZWJpYW4gcGFja2FnZXMgZm9yIHRoZSByZWxlYXNlLiBlLmcuIGh0dHBzOi8vcGFja2FnZXMuZGViaWFuLm9yZy9leHBlcmltZW50YWwvbGliZ2l0Mi0yOFxuICBgbHNiX3JlbGVhc2UgLWFgXG5hZGQgZXhwZXJpbWVudGFsIHBhY2thZ2VzIHRvIHNvdXJjZXM6XG4gIGBcbiAgICBlY2hvIFwiZGViIGh0dHA6Ly9mdHAuZGViaWFuLm9yZy9kZWJpYW4gZXhwZXJpbWVudGFsIG1haW4gY29udHJpYiBub24tZnJlZVwiIHwgc3VkbyB0ZWUgL2V0Yy9hcHQvc291cmNlcy5saXN0LmQvZXhwZXJpbWVudGFsLmxpc3RcbiAgICBhcHQtZ2V0IHVwZGF0ZVxuICBgIFxuaW5zdGFsbCBleHBlcmltZW50YWwgcGFjYWtnZSB1c2luZyBleHBlcmltZW50YWwgc291cmNlczpcbiAgYFxuICBhcHQtZ2V0IC0tdGFyZ2V0LXJlbGVhc2UgZXhwZXJpbWVudGFsIGluc3RhbGwgbGliZ2l0Mi0yOFxuICBgXG5FeGFtcGxlOiBmb3IgRGViaWFuIDEwIChCdXN0ZXIpIGFuZCBub2RlZ2l0IDAuMjYgcmVxdWlyZXMgbGliZ2l0Mi0yOCB0byB3b3JrLCBidXQgbGliZ2l0Mi0yOCBpcyBzdGlsbCBpbiBleHBlcmltZW50YWwgZGlzdHJpYnV0aW9uLiBUcnlpbmcgdG8gaW5zdGFsbCBpdCByZXN1bHRzIGluIGFuIGVycm9yICdsaWJnaXQyLTI4IDogRGVwZW5kczogbGliaHR0cC1wYXJzZXIyLjkgKD49IDIuMSkgYnV0IGl0IGlzIG5vdCBpbnN0YWxsYWJsZSdcblRoZXJlZm9yZSB1c2luZyBhIHByZXZpb3VzIHZlcnNpb24gb2Ygbm9kZWdpdCAoMC4yNSkgd2lsbCBkZXBlbmQgb24gYSBzdGFibGUgdmVyc2lvbiBsaWJnaXQyLTI3LlxuQW5vdGhlciBpc3N1ZSBpcyB0aGUgZGVwZW5kZW5jeSBvZiBub2RlZ2l0IG5wbSBtb2R1bGUgb24gYSBzcGVjaWZpYyBub2RlIGluc3RhbGxhdGlvbiB2ZXJzaW9uLiBTZWVtcyBsaWtlIHRoZSBub2RlZ2l0IDAuMjUgZG9lc24ndCB3b3JrIG9uIG5vZGUgMTMuIG9ubHkgcHJldmlvdXMgdmVyc2lvbnMgbm9kZSA8MTNcbkltcG9ydGFudCBjb25jbHVzaW9uczogXG4gIC0gTm9kZUdpdCBucG0gcGFja2FnZSBzZWVtcyB0byBiZSB0aWdodGx5IGRlcGVuZGVudCBvbiBOb2RlSlMgdmVyc2lvbi5cbiAgLSBOb2RlR2l0IGRlcGVuZHMgb24gTGliR2l0MiB2ZXJzaW9uLlxuICAtIExpYkdpdDIgZGVwZW5kcyBvbiBsaW51eCBkaXRyaWJ1dGlvbi5cbiovXG5leHBvcnQgZnVuY3Rpb24gaW5zdGFsbCh7IHNob3VsZFRocm93ID0gdHJ1ZSB9ID0ge30pIHtcbiAgdHJ5IHtcbiAgICBsZXQgbGliZ2l0MlBhY2thZ2VWZXJzaW9uID0gYGxpYmdpdDItMjdgIC8vIEltcG9ydGF0bnQhIFdoZW4gdXBncmFkZSB0aGUgdmVyc2lvbiBtYWtlIHN1cmUgdGhlIG5vZGVqcyBwYWNrZ2UgYG5vZGVnaXRgIHdoaWNoIGRlcGVuZHMgb24gYGxpYmdpdDJgIHN1cHBvcnRzIHRoZSB2ZXJzaW9uLlxuICAgIC8vIGZvciBVYnVudHUgMTkrIG9yIERlYmlhbiAxMCsgKGkuZS4gcGFja2FnZSBgbGliZ2l0Mi0yN2AgbXVzdCBleGlzdClcbiAgICBsZXQgcGFja2FnZXNJbnN0YWxsZWQgPSBjaGlsZFByb2Nlc3NcbiAgICAgIC5leGVjU3luYyhgbGlzdD1cIiQoZHBrZyAtbClcIiAmJiBlY2hvICRsaXN0YCwgeyBjd2Q6IF9fZGlybmFtZSwgZW5jb2Rpbmc6ICd1dGY4JyB9IC8qKiB0byBhbGxvdyBjYXRjaGluZyByZXR1cm5lZCByZXN1bHQgKi8pXG4gICAgICAucmVwbGFjZSgvXFxuJC8sICcnKVxuICAgICAgLnRyaW0oKSAvLyByZW1vdmUgbmV3IGxpbmUgYW5kIHdoaXRlIHNwYWNlIHRvIHByZXZlbnQgY29tcGFyaXNvbiBpc3N1ZXNcblxuICAgIC8vIHRyeSBgZHBrZyAtbCB8IGdyZXAgbGliZ2l0MmAgdG8gY2hlY2sgdmVyc2lvblxuICAgIGlmIChwYWNrYWdlc0luc3RhbGxlZC5pbmNsdWRlcygnbGliZ2l0MicpKSBjb25zb2xlLmxvZyhgbm9kZWdpdCdzIGRlcGVuZGVuY3kgJ2xpYmdpdDInIGlzIGluc3RhbGxlZC5gKVxuICAgIGVsc2VcbiAgICAgIGNoaWxkUHJvY2Vzcy5leGVjU3luYyhcbiAgICAgICAgW1xuICAgICAgICAgIGBlY2hvICdNYWNoaW5lIGdsb2JhbCBwZWVyIGRlcGVuZGVuY3kgXCJub2RlZ2l0XCIgaXMgcmVxdWlyZWQuIENoZWNraW5nIGZvciBsaWJnaXQyLi4uXFxuJ2AsXG4gICAgICAgICAgLy8gYC1xcWAgPSBObyBvdXRwdXQgZXhjZXB0IGZvciBlcnJvcnNcbiAgICAgICAgICBgREVCSUFOX0ZST05URU5EPW5vbmludGVyYWN0aXZlIHN1ZG8gYXB0LWdldCBpbnN0YWxsIC15cXEgJHtsaWJnaXQyUGFja2FnZVZlcnNpb259IG9wZW5zc2xgLFxuICAgICAgICAgIGBzdWRvIHlhcm4gZ2xvYmFsIGFkZCBub2RlLXByZS1neXBgLCAvLyBmaXhlcyBlcnJvcnMgZHVyaW5nIG5vZGVnaXQgaW5zdGFsbGF0aW9ucywgYWx0aG91Z2ggbm9kZS1wcmUtZ3lwIGFscmVhZHkgZXhpc3RzIGZyb20gbGludXggYXB0IHBhY2thZ2UgbWFuYWdlci5cbiAgICAgICAgXS5qb2luKCcgJiYgXFxcXFxcbicpLFxuICAgICAgICBjaGlsZFByb2Nlc3NPcHRpb24sXG4gICAgICApXG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgaWYgKHNob3VsZFRocm93KSB0aHJvdyBlcnJvclxuICAgIGVsc2UgY29uc29sZS5sb2coZXJyb3IpXG4gIH1cbn1cbiJdfQ==